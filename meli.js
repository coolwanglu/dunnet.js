/*** Generated by streamline 0.12.1 (callbacks) --standalone - DO NOT EDIT ***/ var __rt=(function(){var __modules={},mod;function require(p){var m=__modules[p.substring(3)]; return m && m.exports};__modules['globals']=(mod={exports:{}});(function(module, exports){(function() {var glob = typeof global === "object" ? global : window;var secret = "_20c7abceb95c4eb88b7ca1895b1170d1";var g = glob[secret] || (glob[secret] = { context: {} });if (typeof exports !== 'undefined') {module.exports = g;} else {Streamline.globals = g;}g.runtime || Object.defineProperty(g, 'runtime', {get: function() { return g.__runtime__; },set: function(value) {if (g.__runtime__ !== value) {if (g.__runtime__) {if (/-fast$/.test(g.__runtime__) ||/-fast$/.test(value)) throw new Error("cannot mix streamline runtimes: " + g.__runtime__ + " and " + value);console.log("warning: mixing streamline runtimes: " + g.__runtime__ + " and " + value);}g.__runtime__ = value;}}});g.withContext = function(fn, cx) {return function() {var oldContext = g.context;g.context = cx || Object.create(oldContext);try {return fn.apply(this, arguments)} finally {g.context = oldContext;}};};g.setPromise = function(name) {if (g.Promise) return; var req = require; if (name === true) g.Promise = typeof Promise === "function" ? Promise : req('es6-promise');else g.Promise = require(name);};})();})(mod, mod.exports);__modules['util/future']=(mod={exports:{}});(function(module, exports){(function(exports) {var globals = require("../globals");exports.future = function(fn, args, i) {var err, result, done, q = [], self = this;args = Array.prototype.slice.call(args);args[i] = function(e, r) {err = e, result = r, done = true;q && q.forEach(function(f) {f.call(self, e, r);});q = null;};args[i].__futurecb = true;fn.apply(this, args);var ret = function F(cb) {if (typeof cb !== 'function') {var globals = require('../globals');if (cb == null && globals.Promise) return exports.promise.call(this, F, [], 0);if (cb !== false && !globals.oldStyleFutures) throw new Error("callback missing (argument #0). See https://github.com/Sage/streamlinejs/blob/master/FAQ.md#no-callback-given-error");return F;}if (done) cb.call(self, err, result);else q.push(cb);};ret.__future = true;return ret;};exports.streamlinify = function(fn, idx) {return function() {if (!arguments[idx]) return exports.future.call(this, fn, arguments, idx);else return fn.apply(this, arguments);};};exports.promise = function(fn, args, i) {if (args[i] === false) return exports.future.call(this, fn, args, i);if (args[i] != null) throw new Error("invalid callback: " + typeof(args[i]));if (globals.oldStyleFutures) return exports.future.call(this, fn, args, i);if (!globals.Promise) throw new Error("callback missing (argument #" + i + "). See https://github.com/Sage/streamlinejs/blob/master/FAQ.md#no-callback-given-error");var self = this;args = Array.prototype.slice.call(args);return new globals.Promise(function(resolve, reject) {args[i] = function(e, r) {if (e) reject(e);else resolve(r);};fn.apply(self, args);});};exports.then = function(promise, method, cb) {promise[method](function(r) {cb && cb(null, r);cb = null;}, function(e) {cb && cb(e);cb = null;});};})(typeof exports !== 'undefined' ? exports : (Streamline.future = Streamline.future || {}));})(mod, mod.exports);__modules['callbacks/runtime']=(mod={exports:{}});(function(module, exports){(function(exports) {var __g = require("../globals");__g.runtime = 'callbacks';var __fut = require("../util/future");__g.context = __g.context || {};__g.depth = __g.depth || 0;__g.async = __g.async || false;__g.trampoline = (function() {var q = [];return {queue: function(fn) {q.push(fn);},flush: function() {var oldContext = __g.context;__g.depth++;try {var fn;while (fn = q.shift()) fn();} finally {__g.context = oldContext;__g.depth--;}}}})();exports.runtime = function(filename, oldStyleFutures) {__g.oldStyleFutures = oldStyleFutures;function __func(_, __this, __arguments, fn, index, frame, body) {if (typeof _ !== 'function') return __fut.promise.call(__this, fn, __arguments, index);frame.file = filename;frame.prev = __g.frame;frame.calls = 0;if (frame.prev) frame.prev.calls++;var emitter = __g.emitter;__g.frame = frame;__g.depth++;if (emitter) emitter.emit("enter", frame, _); try {frame.active = true;body();} catch (e) {__setEF(e, frame.prev);__propagate(_, e);} finally {frame.active = false;if (emitter) {emitter.emit("exit", frame);}__g.frame = frame.prev;if (--__g.depth === 0 && __g.trampoline) __g.trampoline.flush();}}return {__g: __g,__func: __func,__cb: __cb,__future: __fut.future,__propagate: __propagate,__trap: __trap,__tryCatch: __tryCatch,__catch: __catch,__forIn: __forIn,__apply: __apply,__construct: __construct,__setEF: __setEF,streamlinify: __fut.streamlinify,__pthen: __fut.then,};};function __cb(_, frame, offset, col, fn, trampo, returnArray) {frame.offset = offset;frame.col = col;var ctx = __g.context;var calls = frame.calls;var emitter = __g.emitter;var ret = function ___(err, result) {if (returnArray) result = Array.prototype.slice.call(arguments, 1);returnArray = false; var oldFrame = __g.frame;__g.frame = frame;var oldContext = __g.context;__g.context = ctx;if (emitter && __g.depth === 0) emitter.emit('resume', frame);if (emitter) emitter.emit('enter', frame);__g.depth++;try {if (trampo && frame.active && __g.trampoline) {__g.trampoline.queue(function() {return ___(err, result);});} else {___.dispatched = true;if (err) {__setEF(err, frame);return _(err);}frame.active = true;return fn(null, result);}} catch (ex) {if (___.dispatched && _.name !== '___' && _.name !== '__trap' && calls !== frame.calls) throw ex;__setEF(ex, frame);return __propagate(_, ex);} finally {frame.active = false;if (emitter) emitter.emit("exit", frame);__g.frame = oldFrame;__g.context = oldContext;if (--__g.depth === 0 && __g.trampoline) __g.trampoline.flush();}};if (emitter && !ret.dispatched) emitter.emit('yield', frame);ret.__streamlined = true;return ret;}function __propagate(_, err) {try {_(err);} catch (ex) {__trap(ex);}}function __trap(err) {if (err) {if (__g.context && __g.context.errorHandler) __g.context.errorHandler(err);else __g.trampoline.queue(function() {throw err;});}}function __tryCatch(_, fn) {try {fn();} catch (e) {try {_(e);} catch (ex) {__trap(ex);}}}function __catch(fn, _) {var frame = __g.frame,context = __g.context;__g.trampoline.queue(function() {var oldFrame = __g.frame,oldContext = __g.context;__g.frame = frame;__g.context = context;try {fn();} catch (ex) {_(ex);} finally {__g.frame = oldFrame;__g.context = oldContext;}});}function __forIn(object) {var array = [];for (var obj in object) {array.push(obj);}return array;}function __apply(cb, fn, thisObj, args, index) {if (cb == null) return __fut.future(__apply, arguments, 0);args = Array.prototype.slice.call(args, 0);args[index != null ? index : args.length] = cb;return fn.apply(thisObj, args);}function __construct(constructor, i) {var key = '__async' + i,f;return constructor[key] || (constructor[key] = function() {var args = arguments;function F() {var self = this;var cb = args[i];args[i] = function(e, r) {cb(e, self);};args[i].__streamlined = cb.__streamlined;args[i].__futurecb = cb.__futurecb;return constructor.apply(self, args);}F.prototype = constructor.prototype;return new F();});}function __setEF(e, f) {function formatStack(e, raw) {var ff = typeof navigator === 'object' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;if (ff) raw = "Error: " + e.message + '\n' + raw;var s = raw,f, skip;var cut = (e.message || '').split('\n').length;var lines = s.split('\n');s = lines.slice(cut).map(function(l) {var m = /([^@]*)\@(.*?)\:(\d+)(?:\:(\d+))?$/.exec(l);l = m ? "  at " + m[1] + " (" + m[2] + ":" + parseInt(m[3]) + ":" + (m[4] || "0") + ")" : l;var i = l.indexOf('__$');if (i >= 0 && !skip) {skip = true;return l.substring(0, i) + l.substring(i + 3);}return skip ? '' : l;}).filter(function(l) {return l;}).join('\n');s = lines.slice(0, cut).join('\n') + '\n  <<< async stack >>>' + (skip ? '\n' + s : '');for (var f = e.__frame; f; f = f.prev) {if (f.offset >= 0) s += "\n  at " + f.name + " (" + f.file + ":" + (f.line + f.offset) + ":" + (f.col+1) + ")"}s += '\n  <<< raw stack >>>' + '\n' + lines.slice(cut).join('\n');return s;};e.__frame = e.__frame || f;if (exports.stackTraceEnabled && e.__lookupGetter__ && e.__lookupGetter__("rawStack") == null) {var getter = e.__lookupGetter__("stack");if (!getter) { var raw = e.stack || "raw stack unavailable";getter = function() {return raw;}}e.__defineGetter__("rawStack", getter);e.__defineGetter__("stack", function() {return formatStack(e, getter.call(this));});}}exports.stackTraceEnabled = true;})(typeof exports !== 'undefined' ? exports : (Streamline.runtime = Streamline.runtime || {}));require && require("../callbacks/builtins");})(mod, mod.exports);return __modules['callbacks/runtime'].exports.runtime('meli._js', false);})(),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; 






















var MELI = function () { 
    function assert(condition) { 
        if (!condition) throw new Error('assertion failed'); } 
    
    
    function InterpreterError(message) { this.message = message; } 
    
    function Parser(str) { 
        this.s = 'progn\n' + str + '\n)'; 
        this.idx = 0; } 
    
    Parser.prototype = { peak: function (offset) { 
            
            offset = offset || 0; 
            assert(0 <= this.idx + offset && this.idx + offset < this.s.length); 
            return this.s[this.idx + offset]; }, advance: function () { 
            
            
            ++this.idx; 
            return this.peak(-1); }, peak_next_non_space: function () { 
            
            
            while (' \n\t\f'.indexOf(this.peak()) != -1) this.advance(); 
            return this.peak(); }, advance_word: function () { 
            
            
            var idx = this.idx; 
            while (' \n\t\f)"'.indexOf(this.peak()) === -1) this.advance(); 
            return this.s.substring(idx, this.idx); }, advance_string: function () { 
            
            
            var l = []; 
            var escapes = { a: 7, b: 8, t: 9, n: 10, v: 11, f: 12, r: 13, e: 27, s: 32, d: 127 }; 
            
            
            
            
            
            
            
            
            
            
            
            while (true) { 
                var c = this.advance(); 
                if (c === '"') return { type: 'string', value: l }; else if (c === '\\') { 
                    
                    c = this.advance(); 
                    if (c in escapes) l.push(escapes[c]); else if (c != '\n') l.push(c.charCodeAt(0)); } else l.push(c.charCodeAt(0)); } }, tokenize: function (get_one) { 
            
            
            
            
            
            var result = []; 
            var stack = [result]; 
            while (true) { 
                var token = null; 
                switch (this.peak_next_non_space()) { case 
                    ';': 
                    while (this.advance() != '\n') { } 
                    break; case 
                    '(': 
                    this.advance(); 
                    token = this.tokenize(); 
                    break; case 
                    ')': 
                    this.advance(); 
                    return result; case 
                    '"': 
                    this.advance(); 
                    token = this.advance_string(); 
                    break; case 
                    '\'': 
                    this.advance(); 
                    token = [ 'quote', [ this.tokenize(true), [] ] ]; 
                    break; default: 
                    
                    var word = this.advance_word(); 
                    var try_int = Number(word); 
                    if (!isNaN(try_int)) token = try_int; else if (word === '.') { 
                        
                        token = null; 
                        stack.pop(-1); 
                        stack[stack.length - 1].pop(-1); } else if (word[0] === '?') { 
                        
                        assert(word.length === 2); 
                        token = word.charCodeAt(1); } else if (word === 'nil') { 
                        
                        token = []; } else token = word; 
                    
                    break; } 
                
                if (token != null) { 
                    if (get_one) return token; 
                    var tail_list = stack[stack.length - 1]; 
                    assert(tail_list.length < 2); 
                    tail_list.push(token); 
                    if (tail_list.length === 1) { 
                        tail_list.push([]); 
                        stack.push(tail_list[1]); } } } } }; 
    
    
    
    
    
    
    function Scope(parent, map) { 
        this.map = map || {}; 
        this.parent = parent; } 
    
    Scope.prototype = { get: function (name) { 
            
            var cur = this; 
            while (cur) { 
                if (name in cur.map) return cur.map[name]; 
                cur = cur.parent; } 
            
            throw new Error('Cannot find: ' + JSON.stringify(name)); }, set: function (name, value) { 
            
            
            this.map[name] = value; }, get_containing_scope: function (name, value) { 
            
            
            var cur = this; 
            while (cur) { 
                if (name in cur.map) return cur; 
                cur = cur.parent; } 
            
            return null; } }; 
    
    
    
    function _is_nil(obj) { 
        return obj instanceof Array && obj.length === 0; } 
    
    
    function _car(l) { 
        assert(l instanceof Array); 
        if (_is_nil(l)) return []; 
        return l[0]; } 
    
    
    function _caar(l) { 
        return _car(_car(l)); } 
    
    
    function _cadr(l) { 
        return _car(_cdr(l)); } 
    
    
    function _cdr(l) { 
        assert(l instanceof Array); 
        if (_is_nil(l)) return []; 
        assert(l.length === 2); 
        return l[1]; } 
    
    
    function _cddr(l) { 
        return _cdr(_cdr(l)); } 
    
    
    function _eq(a, b) { 
        return Object.is(a, b) ? 't' : []; } 
    
    
    function _equal(a, b) { 
        if (typeof a !== typeof b) return []; 
        if (typeof a === 'string' || typeof a === 'number') { 
            return a === b ? 't' : []; } else if (a instanceof Array) { 
            
            if (!(b instanceof Array)) return []; 
            if (_is_nil(a)) return _is_nil(b) ? 't' : []; 
            if (_is_nil(b)) return []; 
            if (_is_nil(_equal(_car(a), _car(b)))) return []; 
            return _equal(_cdr(a), _cdr(b)); } else { 
            
            if (a.type !== b.type) return []; 
            return a.value === b.value ? 't' : []; } } 
    
    
    
    function _list_for_each(_, l, f) { var __frame = { name: '_list_for_each', line: 207 }; return __func(_, this, arguments, _list_for_each, 0, __frame, function __$_list_for_each() { 
            return function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$_list_for_each() { __more = false; var __1 = true; if (__1) { 
                        if (_is_nil(l)) { return _(null); } 
                        return f(__cb(_, __frame, 3, 0, function __$_list_for_each() { 
                            l = _cdr(l); while (__more) { __loop(); } __more = true; }, true, false), _car(l)); } else { __break(); } }); do { __loop(); } while (__more); __more = true; }(_); }); } 
    
    
    
    function _array_to_string(a) { 
        return String.fromCharCode.apply(null, a); } 
    
    
    function _string_to_array(s) { 
        var a = []; 
        for (var i = 0, l = s.length; i < l; ++i) a.push(s.charCodeAt(i)); 
        
        return a; } 
    
    
    function _repr_array(v, no_delimiter) { 
        var r = ''; 
        var first = true; 
        while (true) { 
            if (first) first = false; else r += ' '; 
            
            r += _repr(_car(v), no_delimiter); 
            v = _cdr(v); 
            if (_is_nil(v)) return r; 
            if (v instanceof Array) continue; else return r + ' . ' + _repr(v, no_delimiter); } } 
    
    
    
    
    function _repr(v, no_delimiter) { 
        if (typeof v === 'string') { 
            return v; } else if (typeof v === 'number') { 
            
            return v.toString(); } else if (_is_nil(v)) { 
            
            return 'nil'; } else if (v instanceof Array) { 
            
            return '(' + _repr_array(v, no_delimiter) + ')'; } else if (v.type === 'string') { 
            
            var s = _array_to_string(v.value).replace('\\', '\\\\').replace('"', '\\"').replace('\x07', '\\a').replace('\b', '\\b').replace('\t', '\\t').replace('\n', '\\n').replace('\x0B', '\\v').replace('\f', '\\f').replace('\r', '\\r').replace('\x1B', '\\e').replace('\x7F', '\\d'); 
            
            
            
            
            
            
            
            
            
            
            
            
            return no_delimiter ? s : '"' + s + '"'; } else { 
            
            console.log(v); 
            assert(false); } } 
    
    
    
    var Stack = []; 
    function _interpret(_, obj, scope) { var funcname, f, r, func_scope, cur_arg, cur_value, result; var __frame = { name: '_interpret', line: 271 }; return __func(_, this, arguments, _interpret, 0, __frame, function __$_interpret() { 
            assert(scope); 
            return function __$_interpret(__then) { if (obj instanceof Array) { 
                    if (_is_nil(obj)) { return _(null, []); } funcname = _car(obj); 
                    
                    assert(typeof funcname === 'string'); 
                    if (!(funcname in Functions)) { 
                        window.debug_scope = scope; 
                        console.log(scope); 
                        return _(new Error('Unknown function:' + JSON.stringify(_car(obj)))); } f = Functions[funcname]; 
                    
                    
                    return function __$_interpret(__then) { if (f instanceof Function) { 
                            Stack.push(f.name); 
                            return f(__cb(_, __frame, 14, 0, function ___(__0, __2) { r = __2; 
                                Stack.pop(-1); 
                                return _(null, r); }, true, false), _cdr(obj), scope); } else { 
                            return function __$_interpret(__then) { if (f.type === 'function') { func_scope = new Scope(scope); 
                                    cur_arg = f.args; 
                                    cur_value = _cdr(obj); 
                                    
                                    return function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$_interpret() { __more = false; var __5 = true; if (__5) { 
                                                return function __$_interpret(__then) { if (cur_arg.length > 0) { 
                                                        return _interpret(__cb(_, __frame, 23, 0, function ___(__0, __3) { func_scope.set(_car(cur_arg), __3); 
                                                            if (cur_arg.length > 1) { 
                                                                cur_arg = _cdr(cur_arg); 
                                                                cur_value = _cdr(cur_value); } else { 
                                                                return __break(); } __then(); }, true, false), _car(cur_value), scope); } else { 
                                                        return __break(); } }(function __$_interpret() { while (__more) { __loop(); } __more = true; }); } else { __break(); } }); do { __loop(); } while (__more); __more = true; }(function __$_interpret() { 
                                        
                                        Stack.push(f.name); result = []; 
                                        
                                        return _list_for_each(__cb(_, __frame, 32, 0, function __$_interpret() { 
                                            
                                            
                                            Stack.pop(-1); 
                                            return _(null, result); }, true, false), f.body, function __1(_, item) { var __frame = { name: '__1', line: 303 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { result = __1; _(); }, true, false), item, func_scope); }); }); }); } else { 
                                    
                                    return _(new Error('Cannot run function ' + JSON.stringify(obj) + ' -- ' + JSON.stringify(f))); } }(__then); } }(__then); } else { 
                    
                    if (typeof obj === 'string') { 
                        return _(null, scope.get(obj)); } else { 
                        if ([ 'string', 'vector' ].indexOf(obj.type) != -1) { 
                            return _(null, obj); } else { 
                            if (typeof obj === 'number') { 
                                return _(null, obj); } else { 
                                
                                return _(new Error('Cannot _interpret ' + JSON.stringify(obj))); } } } __then(); } }(_); }); } 
    
    
    
    var _readline_callback = null; 
    function _readline(callback) { 
        _readline_callback = function (s) { 
            _print(s + '\n'); 
            callback(null, { type: 'string', value: _string_to_array(s) }); }; } 
    
    ; 
    
    var _print = function _print(str) { 
        console.log(str); }; 
    
    
    var _default_buffer_name = '*scratch*'; 
    var Buffers = {}; 
    var _cur_buffer = _get_or_create_buffer(_default_buffer_name); 
    function _get_or_create_buffer(name) { 
        if (!(name in Buffers)) { 
            Buffers[name] = { type: 'buffer', value: [], name: name }; } 
        
        return Buffers[name]; } 
    
    
    var Global = new Scope(null, { nil: [], t: 't', 'emacs-version': { type: 'string', value: _string_to_array('22.1.1') }, 'noninteractive': 't' }); 
    
    
    
    
    
    
    
    Global.set([], []); 
    
    var Functions = { '*': function MULTIPLY(_, obj, scope) { 
            var r; var __frame = { name: 'MULTIPLY', line: 355 }; return __func(_, this, arguments, MULTIPLY, 0, __frame, function __$MULTIPLY() { r = 1; 
                
                return _list_for_each(__cb(_, __frame, 2, 0, function __$MULTIPLY() { 
                    
                    
                    
                    
                    return _(null, r); }, true, false), obj, function __1(_, item) { var v; var __frame = { name: '__1', line: 357 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; assert(typeof v === 'number'); r *= v; _(); }, true, false), item, scope); }); }); }); }, '+': function PLUS(_, obj, scope) { 
            
            
            var r; var __frame = { name: 'PLUS', line: 365 }; return __func(_, this, arguments, PLUS, 0, __frame, function __$PLUS() { r = 0; 
                
                return _list_for_each(__cb(_, __frame, 2, 0, function __$PLUS() { 
                    
                    
                    
                    
                    return _(null, r); }, true, false), obj, function __1(_, item) { var v; var __frame = { name: '__1', line: 367 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; assert(typeof v === 'number'); r += v; _(); }, true, false), item, scope); }); }); }); }, '-': function MINUS(_, obj, scope) { 
            
            
            var r, first; var __frame = { name: 'MINUS', line: 375 }; return __func(_, this, arguments, MINUS, 0, __frame, function __$MINUS() { r = 0; 
                first = true; 
                
                return _list_for_each(__cb(_, __frame, 3, 0, function __$MINUS() { 
                    
                    
                    
                    
                    
                    
                    
                    return _(null, r); }, true, false), obj, function __1(_, item) { var v; var __frame = { name: '__1', line: 378 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; assert(typeof v === 'number'); if (first) { first = false; r += v; } else { r -= v; } _(); }, true, false), item, scope); }); }); }); }, '1+': function ONEPLUS(_, obj, scope) { 
            
            
            var v; var __frame = { name: 'ONEPLUS', line: 389 }; return __func(_, this, arguments, ONEPLUS, 0, __frame, function __$ONEPLUS() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; 
                    assert(typeof v === 'number'); 
                    return _(null, v + 1); }, true, false), _car(obj), scope); }); }, '<': function LESS_THAN(_, obj, scope) { 
            
            
            var v1, v2; var __frame = { name: 'LESS_THAN', line: 395 }; return __func(_, this, arguments, LESS_THAN, 0, __frame, function __$LESS_THAN() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v1 = __1; 
                    assert(typeof v1 === 'number'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { v2 = __2; 
                        if (!(typeof v2 === 'number')) { console.log(v1, v2, obj); } 
                        assert(typeof v2 === 'number'); 
                        return _(null, v1 < v2 ? 't' : []); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, '=': function EQUAL(_, obj, scope) { 
            
            
            var v1, v2; var __frame = { name: 'EQUAL', line: 404 }; return __func(_, this, arguments, EQUAL, 0, __frame, function __$EQUAL() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v1 = __1; 
                    assert(typeof v1 === 'number'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { v2 = __2; 
                        assert(typeof v2 === 'number'); 
                        return _(null, v1 === v2 ? 't' : []); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, '>': function GREATER_THAN(_, obj, scope) { 
            
            
            var v1, v2; var __frame = { name: 'GREATER_THAN', line: 412 }; return __func(_, this, arguments, GREATER_THAN, 0, __frame, function __$GREATER_THAN() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v1 = __1; 
                    assert(typeof v1 === 'number'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { v2 = __2; 
                        if (!(typeof v2 === 'number')) { console.log(v1, v2, obj); } 
                        assert(typeof v2 === 'number'); 
                        return _(null, v1 > v2 ? 't' : []); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, '>=': function GREATER_THAN_OR_EQUAL_TO(_, obj, scope) { 
            
            
            var v1, v2; var __frame = { name: 'GREATER_THAN_OR_EQUAL_TO', line: 421 }; return __func(_, this, arguments, GREATER_THAN_OR_EQUAL_TO, 0, __frame, function __$GREATER_THAN_OR_EQUAL_TO() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v1 = __1; 
                    assert(typeof v1 === 'number'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { v2 = __2; 
                        if (!(typeof v2 === 'number')) { console.log(v1, v2, obj); } 
                        assert(typeof v2 === 'number'); 
                        return _(null, v1 >= v2 ? 't' : []); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, abs: function abs(_, obj, scope) { 
            
            
            var v; var __frame = { name: 'abs', line: 430 }; return __func(_, this, arguments, abs, 0, __frame, function __$abs() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; 
                    assert(typeof v === 'number'); 
                    return _(null, Math.abs(v)); }, true, false), _car(obj), scope); }); }, and: function and(_, obj, scope) { 
            
            
            var r; var __frame = { name: 'and', line: 436 }; return __func(_, this, arguments, and, 0, __frame, function __$and() { r = 't'; 
                
                return function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$and() { __more = false; var __2 = true; if (__2) { 
                            if (_is_nil(obj)) { return _(null, r); } 
                            return _interpret(__cb(_, __frame, 4, 0, function ___(__0, __1) { r = __1; 
                                if (_is_nil(r)) { return _(null, []); } 
                                obj = _cdr(obj); while (__more) { __loop(); } __more = true; }, true, false), _car(obj), scope); } else { __break(); } }); do { __loop(); } while (__more); __more = true; }(_); }); }, append: function append(_, obj, scope) { 
            
            
            
            var l1, l2, l; var __frame = { name: 'append', line: 446 }; return __func(_, this, arguments, append, 0, __frame, function __$append() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { l1 = __1; 
                    return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __2) { l2 = __2; l = l1; 
                        
                        
                        if (_is_nil(l)) { return _(null, l2); } 
                        while (!_is_nil(_cdr(l))) { l = _cdr(l); } 
                        l[1] = l2; 
                        
                        return _(null, l1); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, aref: function aref(_, obj, scope) { 
            
            
            var a, i; var __frame = { name: 'aref', line: 458 }; return __func(_, this, arguments, aref, 0, __frame, function __$aref() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { a = __1; 
                    assert(a.type === 'vector' || a.type === 'string'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { i = __2; 
                        assert(typeof i === 'number'); 
                        return _(null, a.value[i]); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, aset: function aset(_, obj, scope) { 
            
            
            var a, i, v; var __frame = { name: 'aset', line: 466 }; return __func(_, this, arguments, aset, 0, __frame, function __$aset() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { a = __1; 
                    return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __2) { i = __2; 
                        assert(typeof i === 'number'); 
                        return _interpret(__cb(_, __frame, 4, 0, function ___(__0, __3) { v = __3; 
                            assert(a.type === 'vector' || a.type === 'string'); 
                            a.value[i] = v; 
                            return _(null, v); }, true, false), _cadr(_cdr(obj)), scope); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, assq: function assq(_, obj, scope) { 
            
            
            var k, l; var __frame = { name: 'assq', line: 476 }; return __func(_, this, arguments, assq, 0, __frame, function __$assq() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { k = __1; 
                    return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __2) { l = __2; 
                        
                        assert(l instanceof Array); 
                        while (true) { 
                            if (_is_nil(l)) { return _(null, []); } 
                            if (!_is_nil(_eq(k, _caar(l)))) { return _(null, _car(l)); } 
                            l = _cdr(l); } _(); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, 'boundp': function boundp(_, obj, scope) { 
            
            
            
            var s; var __frame = { name: 'boundp', line: 488 }; return __func(_, this, arguments, boundp, 0, __frame, function __$boundp() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { s = __1; 
                    assert(typeof s === 'string'); 
                    return _(null, scope.get_containing_scope(s) ? 't' : []); }, true, false), _car(obj), scope); }); }, 'buffer-substring': function buffer_substring(_, obj, scope) { 
            
            
            var start, end; var __frame = { name: 'buffer_substring', line: 494 }; return __func(_, this, arguments, buffer_substring, 0, __frame, function __$buffer_substring() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { start = __1; 
                    assert(typeof start === 'number'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { end = __2; 
                        assert(typeof end === 'number'); 
                        return _(null, { type: 'string', value: _cur_buffer.value.slice(start - 1, end - 1) }); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, car: function car(_, obj, scope) { 
            
            
            
            
            
            var l; var __frame = { name: 'car', line: 505 }; return __func(_, this, arguments, car, 0, __frame, function __$car() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { l = __1; 
                    return _(null, _car(l)); }, true, false), _car(obj), scope); }); }, cadr: function cadr(_, obj, scope) { 
            
            
            var l; var __frame = { name: 'cadr', line: 510 }; return __func(_, this, arguments, cadr, 0, __frame, function __$cadr() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { l = __1; 
                    return _(null, _car(_cdr(l))); }, true, false), _car(obj), scope); }); }, cdr: function cdr(_, obj, scope) { 
            
            
            var l; var __frame = { name: 'cdr', line: 515 }; return __func(_, this, arguments, cdr, 0, __frame, function __$cdr() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { l = __1; 
                    return _(null, _cdr(l)); }, true, false), _car(obj), scope); }); }, concat: function concat(_, obj, scope) { 
            
            
            var r; var __frame = { name: 'concat', line: 520 }; return __func(_, this, arguments, concat, 0, __frame, function __$concat() { r = []; 
                
                return _list_for_each(__cb(_, __frame, 2, 0, function __$concat() { 
                    
                    
                    
                    
                    return _(null, { type: 'string', value: r }); }, true, false), obj, function __1(_, item) { 
                    
                    var v; var __frame = { name: '__1', line: 522 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; assert(v.type === 'string'); r = r.concat(v.value); _(); }, true, false), item, scope); }); }); }); }, cond: function cond(_, obj, scope) { 
            
            
            
            var result, clause; var __frame = { name: 'cond', line: 533 }; return __func(_, this, arguments, cond, 0, __frame, function __$cond() { result = []; 
                
                return function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$cond() { __more = false; var __3 = !_is_nil(obj); if (__3) { clause = _car(obj); 
                            
                            return _interpret(__cb(_, __frame, 4, 0, function ___(__0, __1) { result = __1; 
                                return function __$cond(__then) { if (!_is_nil(result)) { 
                                        return function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$cond() { __more = false; var __5 = true; if (__5) { 
                                                    clause = _cdr(clause); 
                                                    if (_is_nil(clause)) { return __break(); } 
                                                    return _interpret(__cb(_, __frame, 9, 0, function ___(__0, __2) { result = __2; while (__more) { __loop(); } __more = true; }, true, false), _car(clause), scope); } else { __break(); } }); do { __loop(); } while (__more); __more = true; }(__break); } else { __then(); } }(function __$cond() { 
                                    
                                    
                                    
                                    obj = _cdr(obj); while (__more) { __loop(); } __more = true; }); }, true, false), _car(clause), scope); } else { __break(); } }); do { __loop(); } while (__more); __more = true; }(function __$cond() { 
                    
                    return _(null, result); }); }); }, 'condition-case': function condition_case(_, obj, scope) { 
            
            
            var r; var __frame = { name: 'condition_case', line: 551 }; return __func(_, this, arguments, condition_case, 0, __frame, function __$condition_case() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { assert(_is_nil(__1)); 
                    assert(_caar(_cddr(obj)) === 'error'); 
                    
                    return function ___(__then) { (function ___(_) { __tryCatch(_, function __$condition_case() { 
                                return _interpret(__cb(_, __frame, 5, 0, function ___(__0, __2) { r = __2; __then(); }, true, false), _cadr(obj), scope); }); }(function ___(ex, __result) { 
                            __catch(function __$condition_case() { if (ex) { 
                                    return function __$condition_case(__then) { if (ex instanceof InterpreterError) { 
                                            console.log(ex.message); 
                                            return _interpret(__cb(_, __frame, 9, 0, function ___(__0, __4) { var __3 = __4; r = __3; __then(); }, true, false), _cadr(_car(_cddr(obj))), scope); } else { 
                                            return _(ex); } }(__then); } else { _(null, __result); } }, _); })); }(function ___() { __tryCatch(_, function __$condition_case() { 
                            
                            return _(null, r); }); }); }, true, false), _car(obj), scope); }); }, 'current-buffer': function current_buffer(_, obj, scope) { 
            
            
            var __frame = { name: 'current_buffer', line: 566 }; return __func(_, this, arguments, current_buffer, 0, __frame, function __$current_buffer() { 
                return _(null, _cur_buffer); }); }, 'current-time-string': function current_time_string(_, obj, scope) { 
            
            
            var now; 
            
            function to_2s(v) { return (v < 10 ? '0' : '') + v; } var __frame = { name: 'current_time_string', line: 570 }; return __func(_, this, arguments, current_time_string, 0, __frame, function __$current_time_string() { now = new Date(); 
                return _(null, { type: 'string', value: _string_to_array([ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ][now.getDay()] + ' ' + [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ][now.getMonth()] + ' ' + to_2s(now.getDate()) + ' ' + to_2s(now.getHours()) + ':' + to_2s(now.getMinutes()) + ':' + to_2s(now.getSeconds()) + ' ' + now.getFullYear()) }); }); }, DEBUG: function DEBUG(_, obj, scope) { 
            
            
            
            
            
            
            
            
            
            
            
            
            
            var __frame = { name: 'DEBUG', line: 587 }; return __func(_, this, arguments, DEBUG, 0, __frame, function __$DEBUG() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { console.log('DEBUG', __1); _(); }, true, false), _car(obj), scope); }); }, defconst: function defconst(_, obj, scope) { 
            
            
            var sym; var __frame = { name: 'defconst', line: 591 }; return __func(_, this, arguments, defconst, 0, __frame, function __$defconst() { sym = _car(obj); 
                
                return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __1) { Global.set(sym, __1); 
                    return _(null, sym); }, true, false), _cadr(obj), scope); }); }, defcustom: function defcustom(_, obj, scope) { 
            
            
            var sym; var __frame = { name: 'defcustom', line: 597 }; return __func(_, this, arguments, defcustom, 0, __frame, function __$defcustom() { sym = _car(obj); 
                
                return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __1) { Global.set(sym, __1); 
                    return _(null, sym); }, true, false), _cadr(obj), scope); }); }, 'define-key': function define_key(_, obj, scope) { 
            
            
            var km, key, def, l, entry; var __frame = { name: 'define_key', line: 603 }; return __func(_, this, arguments, define_key, 0, __frame, function __$define_key() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { km = __1; 
                    assert(_car(km) === 'keymap'); 
                    
                    return _interpret(__cb(_, __frame, 4, 0, function ___(__0, __2) { key = __2; 
                        assert(key.type === 'string'); 
                        key = key.value[0]; 
                        return _interpret(__cb(_, __frame, 7, 0, function ___(__0, __3) { def = __3; 
                            
                            if (_cadr(km) instanceof Array) { l = km; 
                                
                                while (true) { 
                                    if (_is_nil(_cdr(l))) { 
                                        l[1] = [ [ key, def ], [] ]; 
                                        break; } 
                                    
                                    l = _cdr(l); entry = _car(l); 
                                    
                                    if (entry[0] === key) { 
                                        entry[1] = def; 
                                        break; } } } else { 
                                
                                
                                
                                assert(_cadr(km).type === 'vector'); 
                                _cadr(km).value[key] = def; } 
                            
                            return _(null, def); }, true, false), _cadr(_cdr(obj)), scope); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, defgroup: function defgroup(_) { 
            
            
            var __frame = { name: 'defgroup', line: 633 }; return __func(_, this, arguments, defgroup, 0, __frame, function __$defgroup() { return _(null, []); }); }, defun: function defun(_, obj, scope) { 
            
            var name, func; var __frame = { name: 'defun', line: 635 }; return __func(_, this, arguments, defun, 0, __frame, function __$defun() { name = _car(obj); 
                func = { name: name, type: 'function', args: _cadr(obj), body: _cddr(obj) }; 
                
                
                
                
                
                
                Functions[name] = func; 
                return _(null, func); }); }, defvar: function defvar(_, obj, scope) { 
            
            
            var sym; var __frame = { name: 'defvar', line: 647 }; return __func(_, this, arguments, defvar, 0, __frame, function __$defvar() { sym = _car(obj); 
                
                return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __1) { Global.set(sym, __1); 
                    return _(null, sym); }, true, false), _cadr(obj), scope); }); }, 'delete-file': function delete_file(_, obj, scope) { 
            
            
            var fn; var __frame = { name: 'delete_file', line: 653 }; return __func(_, this, arguments, delete_file, 0, __frame, function __$delete_file() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { fn = __1; 
                    assert(fn.type === 'string'); 
                    fn = _array_to_string(fn.value); 
                    if (typeof localStorage !== 'undefined') { 
                        delete localStorage['DUNNET-JS-FILE-' + fn]; } 
                    
                    return _(null, []); }, true, false), _car(obj), scope); }); }, dolist: function dolist(_, obj, scope) { 
            
            
            var arg, v, list, s; var __frame = { name: 'dolist', line: 663 }; return __func(_, this, arguments, dolist, 0, __frame, function __$dolist() { arg = _car(obj); 
                
                assert(arg instanceof Array); v = _car(arg); 
                
                assert(typeof v === 'string'); 
                return _interpret(__cb(_, __frame, 5, 0, function ___(__0, __2) { list = __2; 
                    if (!(list instanceof Array)) { console.log(list); } 
                    assert(list instanceof Array); s = new Scope(scope); 
                    
                    return _list_for_each(__cb(_, __frame, 9, 0, function __$dolist() { 
                        
                        
                        
                        
                        
                        return _(null, s.get(_cadr(_cdr(arg)))); }, true, false), list, function __1(_, item) { var __frame = { name: '__1', line: 672 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { s.set(v, item); return _list_for_each(__cb(_, __frame, 2, 0, function __$__1() { _(); }, true, false), _cdr(obj), function __1(_, item) { var __frame = { name: '__1', line: 674 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function __$__1() { _(); }, true, false), item, s); }); }); }); }); }, true, false), _cadr(arg), scope); }); }, downcase: function downcase(_, obj, scope) { 
            
            
            var v; var __frame = { name: 'downcase', line: 681 }; return __func(_, this, arguments, downcase, 0, __frame, function __$downcase() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; 
                    assert(typeof v === 'number' || v.type === 'string'); 
                    if (v.type === 'string') { 
                        return _(null, { type: 'string', value: v.value.map(function (v) { 
                                
                                
                                return String.fromCharCode(v).toLowerCase().charCodeAt(0); }) }); } else { 
                        
                        
                        
                        return _(null, String.fromCharCode(v).toLowerCase().charCodeAt(0)); } _(); }, true, false), _car(obj), scope); }); }, eq: function eq(_, obj, scope) { 
            
            
            
            var v1, v2; var __frame = { name: 'eq', line: 696 }; return __func(_, this, arguments, eq, 0, __frame, function __$eq() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v1 = __1; 
                    return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __2) { v2 = __2; 
                        return _(null, _eq(v1, v2)); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, 'erase-buffer': function erase_buffer(_, obj, scope) { 
            
            
            var __frame = { name: 'erase_buffer', line: 702 }; return __func(_, this, arguments, erase_buffer, 0, __frame, function __$erase_buffer() { 
                _cur_buffer.value = []; 
                return _(null, []); }); }, eval: function eval(_, obj, scope) { 
            
            
            var __frame = { name: 'eval', line: 707 }; return __func(_, this, arguments, eval, 0, __frame, function __$eval() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __2) { return _interpret(__cb(_, __frame, 1, 0, _, true, false), __2, scope); }, true, false), _car(obj), scope); }); }, 'eval-and-compile': function eval_and_compile(_) { 
            
            
            var __frame = { name: 'eval_and_compile', line: 711 }; return __func(_, this, arguments, eval_and_compile, 0, __frame, function __$eval_and_compile() { return _(null, []); }); }, 'eval-current-buffer': function eval_current_buffer(_, obj, scope) { 
            
            var __frame = { name: 'eval_current_buffer', line: 713 }; return __func(_, this, arguments, eval_current_buffer, 0, __frame, function __$eval_current_buffer() { 
                return _interpret(__cb(_, __frame, 1, 0, _, true, false), new Parser(_array_to_string(_cur_buffer.value)).tokenize(), scope); }); }, 'eval-when-compile': function eval_when_compile(_) { 
            
            
            var __frame = { name: 'eval_when_compile', line: 717 }; return __func(_, this, arguments, eval_when_compile, 0, __frame, function __$eval_when_compile() { return _(null, []); }); }, 'file-exists-p': function file_exists_p(_, obj, scope) { 
            
            var fn, data; var __frame = { name: 'file_exists_p', line: 719 }; return __func(_, this, arguments, file_exists_p, 0, __frame, function __$file_exists_p() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { fn = __1; 
                    assert(fn.type === 'string'); 
                    fn = _array_to_string(fn.value); 
                    if (typeof localStorage !== 'undefined') { data = localStorage['DUNNET-JS-FILE-' + fn]; 
                        
                        if (typeof data !== 'undefined') { 
                            return _(null, 't'); } } 
                    
                    
                    return _(null, []); }, true, false), _car(obj), scope); }); }, fset: function fset(_, obj, scope) { 
            
            
            var fn, fn2; var __frame = { name: 'fset', line: 732 }; return __func(_, this, arguments, fset, 0, __frame, function __$fset() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { fn = __1; 
                    assert(typeof fn === 'string'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { fn2 = __2; 
                        assert(typeof fn2 === 'string'); 
                        
                        Functions[fn] = Functions[fn2]; 
                        return _(null, fn2); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, 'get-buffer-create': function get_buffer_create(_, obj, scope) { 
            
            
            var s; var __frame = { name: 'get_buffer_create', line: 742 }; return __func(_, this, arguments, get_buffer_create, 0, __frame, function __$get_buffer_create() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { s = __1; 
                    assert(s.type === 'string'); 
                    return _(null, _get_or_create_buffer(_array_to_string(s.value))); }, true, false), _car(obj), scope); }); }, 'goto-char': function goto_char(_) { 
            
            
            var __frame = { name: 'goto_char', line: 748 }; return __func(_, this, arguments, goto_char, 0, __frame, function __$goto_char() { return _(null, []); }); }, if: function IF(_, obj, scope) { 
            
            var r; var __frame = { name: 'IF', line: 750 }; return __func(_, this, arguments, IF, 0, __frame, function __$IF() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __3) { var __2 = _is_nil(__3); return function __$IF(__then) { if (__2) { r = []; 
                            
                            return _list_for_each(__cb(_, __frame, 3, 0, function __$IF() { 
                                
                                
                                return _(null, r); }, true, false), _cddr(obj), function __1(_, item) { var __frame = { name: '__1', line: 753 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { r = __1; _(); }, true, false), item, scope); }); }); } else { 
                            
                            return _interpret(__cb(_, __frame, 8, 0, _, true, false), _cadr(obj), scope); } }(_); }, true, false), _car(obj), scope); }); }, insert: function insert(_, obj, scope) { 
            
            
            
            var s; var __frame = { name: 'insert', line: 762 }; return __func(_, this, arguments, insert, 0, __frame, function __$insert() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { s = __1; 
                    assert(s.type === 'string'); 
                    _cur_buffer.value = _cur_buffer.value.concat(s.value); 
                    return _(null, []); }, true, false), _car(obj), scope); }); }, 'insert-file-contents': function insert_file_contents(_, obj, scope) { 
            
            
            var fn, data; var __frame = { name: 'insert_file_contents', line: 769 }; return __func(_, this, arguments, insert_file_contents, 0, __frame, function __$insert_file_contents() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { fn = __1; 
                    assert(fn.type === 'string'); 
                    filename = _array_to_string(fn.value); 
                    if (typeof localStorage !== 'undefined') { data = localStorage['DUNNET-JS-FILE-' + filename]; 
                        
                        if (typeof data !== 'undefined') { 
                            _cur_buffer.value = _cur_buffer.value.concat(_string_to_array(data)); 
                            return _(null, [ { type: 'string', value: fn.value }, [ data.length, [] ] ]); } } 
                    
                    
                    return _(new InterpreterError('Cannot find file: ' + filename)); }, true, false), _car(obj), scope); }); }, interactive: function interactive(_) { 
            
            
            var __frame = { name: 'interactive', line: 783 }; return __func(_, this, arguments, interactive, 0, __frame, function __$interactive() { return _(null, []); }); }, intern: function intern(_, obj, scope) { 
            
            var s; var __frame = { name: 'intern', line: 785 }; return __func(_, this, arguments, intern, 0, __frame, function __$intern() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { s = __1; 
                    assert(s.type === 'string'); 
                    return _(null, _array_to_string(s.value)); }, true, false), _car(obj), scope); }); }, 'kill-buffer': function kill_buffer(_, obj, scope) { 
            
            
            var b, r; var __frame = { name: 'kill_buffer', line: 791 }; return __func(_, this, arguments, kill_buffer, 0, __frame, function __$kill_buffer() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { b = __1; 
                    assert(b.type === 'buffer'); r = []; 
                    
                    if (b.name in Buffers) { 
                        if (b.name === _default_buffer_name) { Buffers[_default_buffer_name].value.length = 0; } else { 
                            delete Buffers[b.name]; } 
                        r = 't'; 
                        if (b.name === _cur_buffer.name) { _cur_buffer = Buffers[_default_buffer_name]; } } 
                    
                    return _(null, r); }, true, false), _car(obj), scope); }); }, length: function length(_, obj, scope) { 
            
            
            var s, l; var __frame = { name: 'length', line: 804 }; return __func(_, this, arguments, length, 0, __frame, function __$length() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { s = __1; 
                    if (s.type === 'string') { return _(null, s.value.length); } 
                    if (s instanceof Array) { l = 0; 
                        
                        while (!_is_nil(s)) { 
                            s = _cdr(s); 
                            ++l; } 
                        
                        return _(null, l); } 
                    
                    assert(false); _(); }, true, false), _car(obj), scope); }); }, let: function LET(_, obj, scope) { 
            
            
            var let_scope, r; var __frame = { name: 'LET', line: 818 }; return __func(_, this, arguments, LET, 0, __frame, function __$LET() { let_scope = new Scope(scope); 
                
                return _list_for_each(__cb(_, __frame, 2, 0, function __$LET() { r = []; 
                    
                    
                    
                    
                    return _list_for_each(__cb(_, __frame, 7, 0, function __$LET() { 
                        
                        
                        return _(null, r); }, true, false), _cdr(obj), function __2(_, item) { var __frame = { name: '__2', line: 825 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { r = __1; _(); }, true, false), item, let_scope); }); }); }, true, false), _car(obj), function __1(_, item) { var __frame = { name: '__1', line: 820 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return function __$__1(__then) { if (typeof item === 'string') { let_scope.set(item, []); __then(); } else { return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __1) { let_scope.set(_car(item), __1); __then(); }, true, false), _cadr(item), let_scope); } }(_); }); }); }); }, list: function list(_, obj, scope) { 
            
            
            var result, l; var __frame = { name: 'list', line: 831 }; return __func(_, this, arguments, list, 0, __frame, function __$list() { result = []; 
                l = result; 
                
                return _list_for_each(__cb(_, __frame, 3, 0, function __$list() { 
                    
                    
                    
                    return _(null, result); }, true, false), obj, function __1(_, item) { var __frame = { name: '__1', line: 834 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { l.push(__1, []); l = l[1]; _(); }, true, false), item, scope); }); }); }); }, listp: function listp(_, obj, scope) { 
            
            
            var l; var __frame = { name: 'listp', line: 841 }; return __func(_, this, arguments, listp, 0, __frame, function __$listp() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { l = __1; 
                    return _(null, l instanceof Array ? 't' : []); }, true, false), _car(obj), scope); }); }, 'make-sparse-keymap': function make_sparse_keymap(_, obj, scope) { 
            
            
            var __frame = { name: 'make_sparse_keymap', line: 846 }; return __func(_, this, arguments, make_sparse_keymap, 0, __frame, function __$make_sparse_keymap() { 
                return _(null, [ 'keymap', [] ]); }); }, 'make-keymap': function make_keymap(_, obj, scope) { 
            
            
            var km, i; var __frame = { name: 'make_keymap', line: 850 }; return __func(_, this, arguments, make_keymap, 0, __frame, function __$make_keymap() { km = []; 
                
                for (i = 0; i < 256; ++i) { 
                    km.push([]); } 
                return _(null, [ 'keymap', [ { type: 'vector', value: km }, [] ] ]); }); }, 'make-vector': function make_vector(_, obj, scope) { 
            
            
            
            
            
            var r, len, o, i; var __frame = { name: 'make_vector', line: 860 }; return __func(_, this, arguments, make_vector, 0, __frame, function __$make_vector() { r = []; 
                
                return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __1) { len = __1; 
                    assert(typeof len === 'number'); 
                    return _interpret(__cb(_, __frame, 4, 0, function ___(__0, __2) { o = __2; 
                        for (i = 0; i < len; ++i) { 
                            r.push(o); } 
                        return _(null, { type: 'vector', value: r }); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, member: function member(_, obj, scope) { 
            
            
            
            
            
            var e, l; var __frame = { name: 'member', line: 873 }; return __func(_, this, arguments, member, 0, __frame, function __$member() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { e = __1; 
                    return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __2) { l = __2; 
                        assert(l instanceof Array); 
                        while (true) { 
                            if (_is_nil(l)) { return _(null, []); } 
                            if (!_is_nil(_equal(e, _car(l)))) { return _(null, l); } 
                            l = _cdr(l); } _(); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, not: function not(_, obj, scope) { 
            
            
            
            var __frame = { name: 'not', line: 884 }; return __func(_, this, arguments, not, 0, __frame, function __$not() { 
                return function __$not(_) { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __2) { var __1 = _is_nil(__2); if (__1) { return _(null, 't'); } return _(null, []); }, true, false), _car(obj), scope); }(__cb(_, __frame, 1, 0, _, true, false)); }); }, nth: function nth(_, obj, scope) { 
            
            
            var n, l, i; var __frame = { name: 'nth', line: 888 }; return __func(_, this, arguments, nth, 0, __frame, function __$nth() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { n = __1; 
                    assert(typeof n === 'number'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { l = __2; 
                        assert(l instanceof Array); 
                        for (i = 0; i < n; ++i) { 
                            if (_is_nil(l)) { return _(null, []); } 
                            l = _cdr(l); } 
                        
                        return _(null, _car(l)); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, nthcdr: function nthcdr(_, obj, scope) { 
            
            
            var n, l, i; var __frame = { name: 'nthcdr', line: 900 }; return __func(_, this, arguments, nthcdr, 0, __frame, function __$nthcdr() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { n = __1; 
                    assert(typeof n === 'number'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { l = __2; 
                        assert(l instanceof Array); 
                        for (i = 0; i < n; ++i) { 
                            if (_is_nil(l)) { return _(null, []); } 
                            l = _cdr(l); } 
                        
                        return _(null, l); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, or: function or(_, obj, scope) { 
            
            
            var r; var __frame = { name: 'or', line: 912 }; return __func(_, this, arguments, or, 0, __frame, function __$or() { 
                return function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$or() { __more = false; var __2 = true; if (__2) { 
                            if (_is_nil(obj)) { return _(null, []); } 
                            return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __1) { r = __1; 
                                if (!_is_nil(r)) { return _(null, r); } 
                                obj = _cdr(obj); while (__more) { __loop(); } __more = true; }, true, false), _car(obj), scope); } else { __break(); } }); do { __loop(); } while (__more); __more = true; }(_); }); }, 'point-min': function point_min(_, obj, scope) { 
            
            
            
            var __frame = { name: 'point_min', line: 921 }; return __func(_, this, arguments, point_min, 0, __frame, function __$point_min() { 
                return _(null, 1); }); }, 'point-max': function point_max(_, obj, scope) { 
            
            
            var __frame = { name: 'point_max', line: 925 }; return __func(_, this, arguments, point_max, 0, __frame, function __$point_max() { 
                return _(null, 1 + _cur_buffer.value.length); }); }, 'prin1-to-string': function prin1_to_string(_, obj, scope) { 
            
            
            var v; var __frame = { name: 'prin1_to_string', line: 929 }; return __func(_, this, arguments, prin1_to_string, 0, __frame, function __$prin1_to_string() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; 
                    return _(null, { type: 'string', value: _string_to_array(_repr(v)) }); }, true, false), _car(obj), scope); }); }, princ: function princ(_, obj, scope) { 
            
            
            
            
            
            var o; var __frame = { name: 'princ', line: 937 }; return __func(_, this, arguments, princ, 0, __frame, function __$princ() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { o = __1; 
                    _print(_repr(o, true)); 
                    return _(null, o); }, true, false), _car(obj), scope); }); }, progn: function progn(_, obj, scope) { 
            
            
            var r; var __frame = { name: 'progn', line: 943 }; return __func(_, this, arguments, progn, 0, __frame, function __$progn() { r = []; 
                
                return _list_for_each(__cb(_, __frame, 2, 0, function __$progn() { 
                    
                    
                    return _(null, r); }, true, false), obj, function __1(_, item) { var __frame = { name: '__1', line: 945 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { r = __1; _(); }, true, false), item, scope); }); }); }); }, provide: function provide(_) { 
            
            
            var __frame = { name: 'provide', line: 951 }; return __func(_, this, arguments, provide, 0, __frame, function __$provide() { return _(null, []); }); }, quote: function quote(_, obj, scope) { 
            
            var __frame = { name: 'quote', line: 953 }; return __func(_, this, arguments, quote, 0, __frame, function __$quote() { 
                return _(null, _car(obj)); }); }, random: function random(_, obj, scope) { 
            
            
            var n, N; var __frame = { name: 'random', line: 957 }; return __func(_, this, arguments, random, 0, __frame, function __$random() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { n = __1; 
                    assert(_is_nil(n) || n === 't' || typeof n === 'number'); N = typeof n === 'number' ? n : 1 << 31; 
                    
                    return _(null, Math.floor(Math.random() * N)); }, true, false), _car(obj), scope); }); }, 'read-from-minibuffer': function read_from_minibuffer(_, obj, scope) { 
            
            
            var prmpt, init, keymap; var __frame = { name: 'read_from_minibuffer', line: 964 }; return __func(_, this, arguments, read_from_minibuffer, 0, __frame, function __$read_from_minibuffer() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { prmpt = __1; 
                    assert(prmpt.type === 'string'); 
                    assert(_array_to_string(prmpt.value) === ''); 
                    return _interpret(__cb(_, __frame, 4, 0, function ___(__0, __2) { init = __2; 
                        assert(_is_nil(init)); 
                        return _interpret(__cb(_, __frame, 6, 0, function ___(__0, __3) { keymap = __3; 
                            assert(keymap[0] === 'keymap'); 
                            return _readline(__cb(_, __frame, 8, 0, _, true, false)); }, true, false), _car(_cddr(obj)), scope); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, require: function require(_) { 
            
            
            var __frame = { name: 'require', line: 975 }; return __func(_, this, arguments, require, 0, __frame, function __$require() { return _(null, []); }); }, rplaca: function rplaca(_, obj, scope) { 
            
            var l, newcar; var __frame = { name: 'rplaca', line: 977 }; return __func(_, this, arguments, rplaca, 0, __frame, function __$rplaca() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { l = __1; 
                    assert(l instanceof Array); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { newcar = __2; 
                        l[0] = newcar; 
                        return _(null, newcar); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, 'send-string-to-terminal': function send_string_to_terminal(_, obj, scope) { 
            
            
            var s; var __frame = { name: 'send_string_to_terminal', line: 985 }; return __func(_, this, arguments, send_string_to_terminal, 0, __frame, function __$send_string_to_terminal() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { s = __1; 
                    assert(s.type === 'string'); 
                    _print(_array_to_string(s.value)); 
                    return _(null, []); }, true, false), _car(obj), scope); }); }, setq: function setq(_, obj, scope) { 
            
            
            var sym, s, r; var __frame = { name: 'setq', line: 992 }; return __func(_, this, arguments, setq, 0, __frame, function __$setq() { sym = _car(obj); 
                s = scope.get_containing_scope(sym) || Global; 
                
                return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __1) { r = __1; 
                    s.set(sym, r); 
                    return _(null, r); }, true, false), _cadr(obj), scope); }); }, 'sleep-for': function sleep_for(_, obj, scope) { 
            
            
            var s; var __frame = { name: 'sleep_for', line: 1000 }; return __func(_, this, arguments, sleep_for, 0, __frame, function __$sleep_for() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { s = __1; 
                    assert(typeof s === 'number'); 
                    return setTimeout(__cb(_, __frame, 3, 0, function __$sleep_for() { 
                        return _(null, []); }, true, false), s * 1000); }, true, false), _car(obj), scope); }); }, 'string-match': function string_match(_, obj, scope) { 
            
            
            var regexp, s, idx; var __frame = { name: 'string_match', line: 1007 }; return __func(_, this, arguments, string_match, 0, __frame, function __$string_match() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { regexp = __1; 
                    assert(regexp.type === 'string'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { s = __2; 
                        assert(s.type === 'string'); idx = _array_to_string(s.value).search(new RegExp(_array_to_string(regexp.value))); 
                        
                        return _(null, idx === -1 ? [] : idx); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, 'string=': function string_EQUAL_TO(_, obj, scope) { 
            
            
            var v1, v2; var __frame = { name: 'string_EQUAL_TO', line: 1016 }; return __func(_, this, arguments, string_EQUAL_TO, 0, __frame, function __$string_EQUAL_TO() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v1 = __1; 
                    assert(typeof v1 === 'string' || v1.type === 'string'); 
                    if (v1.type === 'string') { v1 = _array_to_string(v1.value); } 
                    return _interpret(__cb(_, __frame, 4, 0, function ___(__0, __2) { v2 = __2; 
                        assert(typeof v2 === 'string' || v2.type === 'string'); 
                        if (v2.type === 'string') { v2 = _array_to_string(v2.value); } 
                        return _(null, v1 === v2 ? 't' : []); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, stringp: function stringp(_, obj, scope) { 
            
            
            var s; var __frame = { name: 'stringp', line: 1026 }; return __func(_, this, arguments, stringp, 0, __frame, function __$stringp() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { s = __1; 
                    return _(null, s.type === 'string' ? 't' : []); }, true, false), _car(obj), scope); }); }, substring: function substring(_, obj, scope) { 
            
            
            var v1, v2, v3; var __frame = { name: 'substring', line: 1031 }; return __func(_, this, arguments, substring, 0, __frame, function __$substring() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v1 = __1; 
                    assert(v1.type === 'string'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { v2 = __2; 
                        assert(typeof v2 === 'number'); 
                        return _interpret(__cb(_, __frame, 5, 0, function ___(__0, __3) { v3 = __3; 
                            assert(_is_nil(v3) || typeof v3 === 'number'); 
                            if (_is_nil(v3)) { v3 = v1.value.length; } 
                            return _(null, { type: 'string', value: v1.value.slice(v2, v3) }); }, true, false), _cadr(_cdr(obj)), scope); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, 'switch-to-buffer': function switch_to_buffer(_, obj, scope) { 
            
            
            
            
            
            var s; var __frame = { name: 'switch_to_buffer', line: 1045 }; return __func(_, this, arguments, switch_to_buffer, 0, __frame, function __$switch_to_buffer() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { s = __1; 
                    assert(s.type === 'string' || s.type === 'buffer'); 
                    if (s.type === 'buffer') { _cur_buffer = s; } else { 
                        _cur_buffer = _get_or_create_buffer(s.value); } 
                    return _(null, _cur_buffer); }, true, false), _car(obj), scope); }); }, symbolp: function symbolp(_, obj, scope) { 
            
            
            var s; var __frame = { name: 'symbolp', line: 1053 }; return __func(_, this, arguments, symbolp, 0, __frame, function __$symbolp() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { s = __1; 
                    return _(null, typeof s === 'string' ? 't' : []); }, true, false), _car(obj), scope); }); }, unless: function unless(_, obj, scope) { 
            
            
            var r; var __frame = { name: 'unless', line: 1058 }; return __func(_, this, arguments, unless, 0, __frame, function __$unless() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __3) { var __2 = _is_nil(__3); return function __$unless(__then) { if (__2) { r = []; 
                            
                            return _list_for_each(__cb(_, __frame, 3, 0, function __$unless() { 
                                
                                
                                return _(null, r); }, true, false), _cdr(obj), function __1(_, item) { var __frame = { name: '__1', line: 1061 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { r = __1; _(); }, true, false), item, scope); }); }); } else { 
                            
                            return _(null, []); } }(_); }, true, false), _car(obj), scope); }); }, upcase: function upcase(_, obj, scope) { 
            
            
            
            var v; var __frame = { name: 'upcase', line: 1070 }; return __func(_, this, arguments, upcase, 0, __frame, function __$upcase() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { v = __1; 
                    assert(typeof v === 'number' || v.type === 'string'); 
                    if (v.type === 'string') { 
                        return _(null, { type: 'string', value: v.value.map(function (v) { 
                                
                                
                                return String.fromCharCode(v).toUpperCase().charCodeAt(0); }) }); } else { 
                        
                        
                        
                        return _(null, String.fromCharCode(v).toUpperCase().charCodeAt(0)); } _(); }, true, false), _car(obj), scope); }); }, 'user-login-name': function user_login_name(_, obj, scope) { 
            
            
            
            var __frame = { name: 'user_login_name', line: 1085 }; return __func(_, this, arguments, user_login_name, 0, __frame, function __$user_login_name() { 
                return _(null, { type: 'string', value: _string_to_array('root') }); }); }, when: function when(_, obj, scope) { 
            
            
            var r; var __frame = { name: 'when', line: 1089 }; return __func(_, this, arguments, when, 0, __frame, function __$when() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __3) { var __2 = !_is_nil(__3); return function __$when(__then) { if (__2) { r = []; 
                            
                            return _list_for_each(__cb(_, __frame, 3, 0, function __$when() { 
                                
                                
                                return _(null, r); }, true, false), _cdr(obj), function __1(_, item) { var __frame = { name: '__1', line: 1092 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { r = __1; _(); }, true, false), item, scope); }); }); } else { 
                            
                            return _(null, []); } }(_); }, true, false), _car(obj), scope); }); }, while: function WHILE(_, obj, scope) { 
            
            
            
            var r; var __frame = { name: 'WHILE', line: 1101 }; return __func(_, this, arguments, WHILE, 0, __frame, function __$WHILE() { r = []; 
                
                return function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$WHILE() { __more = false; return function __$WHILE(_) { return _interpret(__cb(_, __frame, 2, 0, function ___(__0, __3) { var __2 = !_is_nil(__3); return _(null, __2); }, true, false), _car(obj), scope); }(__cb(_, __frame, 2, 0, function ___(__0, __2) { if (__2) { 
                                return _list_for_each(__cb(_, __frame, 3, 0, function __$WHILE() { while (__more) { __loop(); } __more = true; }, true, false), _cdr(obj), function __1(_, item) { var __frame = { name: '__1', line: 1104 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { 
                                        return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { r = __1; _(); }, true, false), item, scope); }); }); } else { __break(); } }, true, false)); }); do { __loop(); } while (__more); __more = true; }(function __$WHILE() { 
                    
                    
                    return _(null, r); }); }); }, 'write-region': function write_region(_, obj, scope) { 
            
            
            var start, end, fn, append; var __frame = { name: 'write_region', line: 1111 }; return __func(_, this, arguments, write_region, 0, __frame, function __$write_region() { 
                return _interpret(__cb(_, __frame, 1, 0, function ___(__0, __1) { start = __1; 
                    assert(typeof start === 'number'); 
                    return _interpret(__cb(_, __frame, 3, 0, function ___(__0, __2) { end = __2; 
                        assert(typeof end === 'number'); 
                        return _interpret(__cb(_, __frame, 5, 0, function ___(__0, __3) { fn = __3; 
                            assert(fn.type === 'string'); 
                            fn = _array_to_string(fn.value); 
                            return _interpret(__cb(_, __frame, 8, 0, function ___(__0, __4) { append = __4; 
                                assert(_is_nil(append)); 
                                if (typeof localStorage !== 'undefined') { 
                                    localStorage['DUNNET-JS-FILE-' + fn] = _array_to_string(_cur_buffer.value.slice(start - 1, end - 1)); } 
                                
                                return _(null, []); }, true, false), _cadr(_cddr(obj)), scope); }, true, false), _car(_cddr(obj)), scope); }, true, false), _cadr(obj), scope); }, true, false), _car(obj), scope); }); }, yow: function yow(_, obj, scope) { 
            
            
            var __frame = { name: 'yow', line: 1127 }; return __func(_, this, arguments, yow, 0, __frame, function __$yow() { 
                return _(null, { type: 'string', value: _string_to_array('Yow!!') }); }); } }; 
    
    
    
    return { eval: function eval(input, options) { 
            
            options = options || {}; 
            if (options.onprint) _print = options.onprint; 
            _interpret(function (ex, ret) { 
                if (ex) { 
                    console.log('lisp stack:', Stack); 
                    console.log(ex.message); 
                    console.log(ex.stack); } else if (options.onexit) { 
                    
                    options.onexit(ret); } }, new Parser(input).tokenize(), Global); }, scan_missing: function scan_missing(input, ignore_func) { 
            
            
            
            
            
            var tokens = new Parser(input).tokenize(); 
            var missing = {}; 
            (function scan(tokens, first) { 
                if (!(tokens instanceof Array)) return; 
                while (!_is_nil(tokens)) { 
                    if (_is_nil(x)) return; 
                    var x = _car(tokens); 
                    if (x instanceof Array) scan(x, true); else if (typeof x === 'string' && first) { 
                        
                        if (!(ignore_func && ignore_func(x))) { 
                            if (!(x in Functions) && !(x in missing)) missing[x] = 1; } } 
                    
                    
                    
                    if (first && _car(tokens) === 'quote') return; else if (first && _car(tokens) === 'defun') tokens = _cdr(_cddr(tokens)); else if (first && _car(tokens) === 'let') tokens = _cddr(tokens); else if (first && _car(tokens) === 'dolist') { 
                        
                        
                        
                        scan(_cadr(_cadr(tokens))); 
                        tokens = _cddr(tokens); } else tokens = _cdr(tokens); 
                    
                    first = false; 
                    if (!(tokens instanceof Array)) return; } }(tokens, true)); 
            
            
            for (var k in missing) console.log('missing ', k); }, readline_callback: function readline_callback(s) { 
            
            
            
            if (_readline_callback) { 
                var cb = _readline_callback; 
                _readline_callback = null; 
                cb(s); 
                return true; } 
            
            return false; } }; }();